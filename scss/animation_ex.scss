// ✅ transform으로 애니메이션 처리를하면 좋은 이유
// 1. web은 Render Tree -> Layout -> Paint -> Compisite 순으로 빌딩이 되는데 다른 값들은 값이 변경되면
//    Layout부터 다시 그리지만 Transition은 Composite부터 다시 그려서 성능이 좋다.
// 2. transform은 다른 쓰레드에서 처리해준다.

body{
    margin: 0;
}

// 과제 1번
.shake-button{
    border-radius: 4px;
    color: white;
    background-color: rgb(137, 238, 250);
    border: none;
    padding: 12px;
}

.shake-button:hover {
    animation-name: shake;
    animation-duration: 0.5s;
}

@keyframes shake {
    0% {
        transform: rotate(0deg)
    }
    20% {
        transform: rotate(15deg)
    }
    40% {
        transform: rotate(-15deg)
    }
    60% {
        transform: rotate(15deg)
    }
    80% {
        transform: rotate(-15deg)
    }
    100% {
        transform: rotate(0deg)
    }
}


// 과제 2번
.shake-zoom-icon{
    font-size: 40px;
    text-align: center;
}

.shake-zoom-icon:hover {
    animation-name: shake-zoom;
    animation-duration: 1s;
    animation-fill-mode: forwards;
}

@keyframes shake-zoom {
    0% {
        transform: rotate(0deg)
    }
    50% {
        transform: rotate(-20deg)
    }
    100% {
        transform: rotate(40deg) scale(1.5)
    }
}

// 과제 3번
.sidebar{
    height: 100vh; /* 뷰포트(화면) 높이 100% */
    width: 20%;
    transform: translateX(-60%);
    transition: transform 1s;
    background-color: black;
    color: white;
    text-align: center;
}

.sidebar:hover {
    transform: translateX(0%);

    .sidebar-item{
        // 눈에 띄게 반복/왕복
        animation: move 0.6s;
        animation-fill-mode: forwards; // 애니메이션 유지
    }
    .sidebar-menu{
        transform: translateX(0%);
    }
}

.sidebar-menu{
    transform: translateX(40%);
    transition: transform 0s;
}

@keyframes move {
    0% {
        transform: translateX(0px) skew(-40deg);
    }
    50% {
        transform: translateX(20%) skew(-40deg);
    }
    100% {
        transform: translateX(0%) skew(0deg);
    }
}
